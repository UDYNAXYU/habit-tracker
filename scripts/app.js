'use strict';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let habbits = []; // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫
const HABBIT_KEY = 'HABBIT_KEY'; // –ö–ª—é—á –¥–ª—è localStorage
const ACHIEVEMENTS_KEY = 'ACHIEVEMENTS_KEY'; // –ö–ª—é—á –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≤ localStorage

// –û–±—ä–µ–∫—Ç —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
const page = {
  body: document.querySelector('body'),
  menu: document.querySelector('.menu'),
  addButton: document.querySelector('.add-button'),
  habit: document.querySelector('.habit'),
  habbitContent: document.querySelector('.habbit-content'),
  habbitHeader: {
    habbitTitle: document.querySelector('.habit-title'),
    progresPercent: document.querySelector('.progres-percent'),
    progresBar: document.querySelector('.progres-bar'),
  },
  content: {
    habitList: document.querySelector('.habit-list'),
    newCommentDay: document.querySelector('.new-comment .comment-day'),
    form: document.querySelector('form.comment-description'),
  },
  popup: {
    window: document.querySelector('.popup'),
    form: document.querySelector('.popup-form'),
  },
  achievements: {
    notification: document.getElementById('achievement-notification'),
    page: document.getElementById('achievements-page'),
    grid: document.getElementById('achievements-grid'),
    showBtn: document.getElementById('show-achievements-btn')
  }
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
const ACHIEVEMENTS = {
  first_habit: {
    title: "–ü–µ—Ä–≤—ã–π —à–∞–≥!",
    desc: "–°–æ–∑–¥–∞–Ω–∞ –ø–µ—Ä–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞",
    icon: "üöÄ",
    check: (h) => h.length >= 1
  },
  three_days: {
    title: "–ó–∞–¥–µ–ª –Ω–∞ –±—É–¥—É—â–µ–µ",
    desc: "–û—Ç–º–µ—á–∞–ª–∏ –ø—Ä–∏–≤—ã—á–∫—É 3 –¥–Ω—è –ø–æ–¥—Ä—è–¥",
    icon: "üìà",
    check: (h) => h.some(x => x.days.length >= 3)
  },
  week: {
    title: "–ù–µ–¥–µ–ª—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã",
    desc: "7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ —Å –ø—Ä–∏–≤—ã—á–∫–æ–π",
    icon: "üèÜ",
    check: (h) => h.some(x => x.days.length >= 7)
  }
};

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
function showAchievement(achievement) {
  const notification = document.getElementById('achievement-notification');

  if (!notification) {
    console.error('–≠–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DOM');
    return;
  }

  const emoji = notification.querySelector('#achievement-emoji');
  const title = notification.querySelector('#achievement-title');
  const desc = notification.querySelector('#achievement-desc');

  if (!emoji || !title || !desc) {
    console.error('–ù–µ –Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
    return;
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  emoji.textContent = achievement.icon;
  title.textContent = achievement.title;
  desc.textContent = achievement.desc;

  // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  notification.classList.add('active');

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
  setTimeout(() => {
    notification.classList.remove('active');
  }, 4000);

  playAchievementSound();
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function checkAchievements() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–∑ localStorage
    const unlocked = JSON.parse(localStorage.getItem(ACHIEVEMENTS_KEY) || '{}');
    let newAchievements = false;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    Object.entries(ACHIEVEMENTS).forEach(([key, achievement]) => {
      if (!unlocked[key] && achievement.check(habbits)) {
        unlocked[key] = true;
        showAchievement(achievement);
        newAchievements = true;
      }
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    if (newAchievements) {
      localStorage.setItem(ACHIEVEMENTS_KEY, JSON.stringify(unlocked));
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function showAchievementsPage() {
  const { page: achievementsPage, grid } = page.achievements;
  const unlocked = JSON.parse(localStorage.getItem(ACHIEVEMENTS_KEY) || '{}');

  // –û—á–∏—â–∞–µ–º —Å–µ—Ç–∫—É
  grid.innerHTML = '';

  // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  Object.entries(ACHIEVEMENTS).forEach(([key, achievement]) => {
    const isUnlocked = unlocked[key];
    const card = document.createElement('div');
    card.className = `achievement-card ${isUnlocked ? 'unlocked' : 'locked'}`;
    card.innerHTML = `
      <div class="achievement-card-icon">${isUnlocked ? achievement.icon : 'üîí'}</div>
      <h3 class="achievement-card-title">${isUnlocked ? achievement.title : '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ'}</h3>
      <p class="achievement-card-desc">${isUnlocked ? achievement.desc : '–í—ã –µ—â–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ'}</p>
    `;
    grid.appendChild(card);
  });

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
  achievementsPage.style.display = 'block';
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function closeAchievements() {
  page.achievements.page.style.display = 'none';
}

// –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å localStorage

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage
function loadData() {
  try {
    const habbitsString = localStorage.getItem(HABBIT_KEY);
    const habbitsCollection = JSON.parse(habbitsString);
    if (habbitsCollection) {
      habbits = habbitsCollection;
    }
  } catch (error) {
    console.error('–ù–µ –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', error);
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ localStorage
function saveData() {
  const habbitsString = JSON.stringify(habbits);
  localStorage.setItem(HABBIT_KEY, habbitsString);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

// –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã –ø–æ–ø–∞–ø–∞
function clearPopupForm() {
  const form = page.popup.form;
  form.reset();
  form.elements.habbit.forEach((item) => {
    item.nextElementSibling.classList.remove('error');
  });
  form.habbitName.classList.remove('error');
  form.habbitGoal.classList.remove('error');
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–æ—Ä–º—ã
function getDataForm(form, fields) {
  const dataForm = new FormData(form);
  const res = {};
  let formIsValid = true;

  fields.forEach((field) => {
    let data = dataForm.get(field.name);
    if (field.type === 'number') {
      data = Number(data);
    }

    const isNodeList = NodeList.prototype.isPrototypeOf(form[field.name]);

    // –£–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å—ã –æ—à–∏–±–æ–∫
    if (isNodeList) {
      form[field.name].forEach((item) =>
        item.nextElementSibling.classList.remove('error')
      );
    } else {
      form[field.name].classList.remove('error');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
    if (!data) {
      if (isNodeList) {
        form[field.name].forEach((item) =>
          item.nextElementSibling.classList.add('error')
        );
      } else {
        form[field.name].classList.add('error');
      }
      formIsValid = false;
    }

    res[field.name] = data;
  });

  if (!formIsValid) {
    return;
  }

  return res;
}

// –§—É–Ω–∫—Ü–∏–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞

// –†–µ–Ω–¥–µ—Ä –º–µ–Ω—é –ø—Ä–∏–≤—ã—á–µ–∫
function renderMenu(activeHabbit) {
  page.menu.innerHTML = '';

  habbits.forEach((habbit) => {
    const menuItem = document.createElement('div');
    menuItem.className = 'menu-item';

    // –°–æ–∑–¥–∞–Ω–∏–µ HTML –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ –º–µ–Ω—é
    menuItem.innerHTML = `
      <div class="habbit-container">
        <div class="menu-link ${habbit.id === activeHabbit?.id ? 'menu-link-active' : ''}">
          <svg class="menu-icon">
            <use xlink:href="img/sprite.svg#${habbit.icon}"></use>
          </svg>
          <span class="habbit-name">${habbit.name}</span>
        </div>
        <button class="delete-btn" onclick="deleteHabbit(${habbit.id}, event)">
          –£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É
        </button>
      </div>
    `;

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–ª–∏–∫–∞
    menuItem.querySelector('.menu-link').addEventListener('click', () => {
      render(habbit);
    });

    page.menu.appendChild(menuItem);
  });
}

// –†–µ–Ω–¥–µ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø—Ä–∏–≤—ã—á–∫–∏
function renderHabbitHeader(habbit) {
  // –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  const progresPercent =
    habbit.days.length <= habbit.target
      ? (habbit.days.length * 100) / habbit.target
      : 100;

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –≤ DOM
  page.habbitHeader.habbitTitle.textContent = habbit.name;
  page.habbitHeader.progresPercent.textContent = progresPercent.toFixed() + '%';
  page.habbitHeader.progresBar.style.setProperty(
    '--progress',
    `${progresPercent}%`
  );
}

// –†–µ–Ω–¥–µ—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø—Ä–∏–≤—ã—á–∫–∏
function renderHabbitComments(habbit) {
  page.content.habitList.innerHTML = '';

  // –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
  habbit.days.forEach((day, i) => {
    const elem = document.createElement('li');
    elem.classList.add('comment');
    elem.innerHTML = `<h3 class="comment-day">–î–µ–Ω—å ${i + 1}</h3>
            <div class="comment-description">
              <span class="comment-text"
                >${day.comment}</span
              >
              <button class="delete" onclick="deleteDay(${i})">
                <svg class="delete-button-icon">
                  <use xlink:href="img/sprite.svg#delete"></use>
                </svg>
              </button>
            </div>`;
    page.content.habitList.appendChild(elem);
  });

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–º–µ—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
  page.content.newCommentDay.textContent = `–î–µ–Ω—å ${habbit.days.length + 1}`;
  page.content.form.setAttribute('active-habbit-id', habbit.id);
}

// –†–µ–Ω–¥–µ—Ä –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ (–∫–æ–≥–¥–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫)
function renderGreeting() {
  const elem = document.createElement('div');
  elem.classList.add('greeting');
  elem.innerHTML = `
    <h2 class="greeting-title">–ü–æ–∫–∞ –ø—É—Å—Ç–æ!
      <span class="greeting-subtitle">–°–æ–∑–¥–∞–π —Å–≤–æ—é –ø–µ—Ä–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É.</span>
    </h2>
    <button class="button" onclick="toglePopup()">–°–æ–∑–¥–∞—Ç—å</button>
  `;

  // –û—á–∏—â–∞–µ–º –º–µ–Ω—é
  page.menu.innerHTML = '';
  page.habbitContent.style.display = 'none';

  // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –µ—Å–ª–∏ –±—ã–ª–æ
  const oldGreeting = page.habit.querySelector('.greeting');
  if (oldGreeting) oldGreeting.remove();

  page.habit.appendChild(elem);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–∏–≤—ã—á–∫–∏ (—Å–∫—Ä—ã—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ)
function renderHabbitContent() {
  const greeting = page.habit.querySelector('.greeting');
  if (greeting) {
    greeting.remove();
    page.habbitContent.style.display = 'block';
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
function render(activeHabbit) {
  if (!activeHabbit) {
    return;
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º URL –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  document.location.replace(`${document.location.pathname}#${activeHabbit.id}`);
  document.title = `dailyDo - —Ç—Ä–µ–∫–µ—Ä –ø—Ä–∏–≤—ã—á–µ–∫ | ${activeHabbit.name}`;

  // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
  renderHabbitContent();
  renderMenu(activeHabbit);
  renderHabbitHeader(activeHabbit);
  renderHabbitComments(activeHabbit);
}

// –†–∞–±–æ—Ç–∞ —Å –¥–Ω—è–º–∏ –ø—Ä–∏–≤—ã—á–∫–∏

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–Ω—è
function addDays(e) {
  e.preventDefault();
  const form = e.target;
  const formData = getDataForm(form, [
    { name: 'newDayComment', type: 'text' }
  ]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
  if (!formData || !formData.newDayComment) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã');
    return;
  }

  // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
  form.newDayComment.value = '';

  // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â—É—é –ø—Ä–∏–≤—ã—á–∫—É
  const habbitId = Number(form.getAttribute('active-habbit-id'));
  const habbit = habbits.find((habbit) => habbit.id === habbitId);

  if (!habbit) {
    console.error('–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    return;
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –¥–µ–Ω—å
  habbit.days.push({ comment: formData.newDayComment });
  saveData();
  render(habbit);
  checkAchievements();
}

// –£–¥–∞–ª–µ–Ω–∏–µ –¥–Ω—è
function deleteDay(index) {
  const habbitId = Number(page.content.form.getAttribute('active-habbit-id'));
  const habbit = habbits.find((habbit) => habbit.id === habbitId);
  habbit.days.splice(index, 1);
  saveData();
  render(habbit);
}

// –†–∞–±–æ—Ç–∞ —Å –ø–æ–ø–∞–ø–æ–º

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ø–∞–ø–∞
function toglePopup() {
  page.body.classList.toggle('shadow');
  page.popup.window.classList.toggle('popup-open');
  clearPopupForm();
}

// –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏
function deleteHabbit(id, event) {
  event.stopPropagation();
  if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –ø—Ä–∏–≤—ã—á–∫—É?')) {
    habbits = habbits.filter(habbit => habbit.id !== id);
    saveData();

    const currentHabbit = habbits.length > 0 ? habbits[0] : null;
    render(currentHabbit);

    if (habbits.length === 0) {
      renderGreeting();
    }
  }
}

// –†–∞–±–æ—Ç–∞ —Å –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–æ–π

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏
function addHabbit(e) {
  e.preventDefault();
  const form = e.target;
  const data = getDataForm(form, [
    {
      name: 'habbit',
      type: 'text',
    },
    {
      name: 'habbitName',
      type: 'text',
    },
    {
      name: 'habbitGoal',
      type: 'number',
    },
  ]);

  if (data) {
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É
    habbits.push({
      id: habbits.length + 1,
      icon: data.habbit,
      name: data.habbitName,
      target: data.habbitGoal,
      days: [],
    });

    toglePopup();
    saveData();
    render(habbits[habbits.length - 1]);
  }
  checkAchievements();
}

// –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –∫–Ω–æ–ø–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function checkButtonPosition() {
  const btn = document.getElementById('show-achievements-btn');
  if (!btn) return;

  // –ê–¥–∞–ø—Ç–∞—Ü–∏—è –¥–ª—è —à–∏—Ä–æ–∫–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤
  if (window.innerWidth > 800) {
    btn.innerHTML = `
      <svg width="20" height="20"><!-- ... --></svg>
    `;
    btn.style.padding = '12px';
    btn.querySelector('span').style.display = 'none';
  } else {
    btn.innerHTML = `
      <svg width="20" height="20"><!-- ... --></svg>
      <span>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</span>
    `;
    btn.style.padding = '12px 24px';
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (—à–∏—Ä–æ–∫–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º)
function isWidescreen() {
  return window.matchMedia("(min-aspect-ratio: 16/9)").matches;
}

// –ê–¥–∞–ø—Ç–∞—Ü–∏—è –º–∞–∫–µ—Ç–∞
function adaptLayout() {
  if (isWidescreen()) {
    document.body.classList.add('widescreen');
  } else {
    document.body.classList.remove('widescreen');
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
(() => {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
  if (!page.achievements.notification) {
    console.error('–ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö');
  }
  if (!page.achievements.page) {
    console.error('–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  loadData();

  // –†–µ–Ω–¥–µ—Ä –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏–ª–∏ –ø—Ä–∏–≤—ã—á–µ–∫
  if (!habbits.length) {
    renderGreeting();
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ hash –≤ URL –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–∏
  const id = document.location.hash.replace('#', '');
  const habbit = habbits.find((habbit) => habbit.id === Number(id));
  if (habbit) {
    render(habbit);
  } else if (habbits.length) {
    render(habbits[0]);
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  if (page.achievements.showBtn) {
    page.achievements.showBtn.addEventListener('click', showAchievementsPage);
  } else {
    console.error('–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
  setTimeout(checkAchievements, 1000);
})();