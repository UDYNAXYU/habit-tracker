'use strict';

// ======================
// –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò –ü–ï–†–ï–ú–ï–ù–ù–´–ï
// ======================

// –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫
let habbits = [];

// –ö–ª—é—á–∏ –¥–ª—è localStorage
const HABBIT_KEY = 'HABBIT_KEY';
const ACHIEVEMENTS_KEY = 'ACHIEVEMENTS_KEY';

// –û–±—ä–µ–∫—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ DOM-—ç–ª–µ–º–µ–Ω—Ç–∞–º
const page = {
  body: document.querySelector('body'),
  menu: document.querySelector('.menu'),
  addButton: document.querySelector('.add-button'),
  habit: document.querySelector('.habit'),
  habbitContent: document.querySelector('.habbit-content'),
  habbitHeader: {
    habbitTitle: document.querySelector('.habit-title'),
    progresPercent: document.querySelector('.progres-percent'),
    progresBar: document.querySelector('.progres-bar'),
  },
  content: {
    habitList: document.querySelector('.habit-list'),
    newCommentDay: document.querySelector('.new-comment .comment-day'),
    form: document.querySelector('form.comment-description'),
  },
  popup: {
    window: document.querySelector('.popup'),
    form: document.querySelector('.popup-form'),
  },
  achievements: {
    notification: document.getElementById('achievement-notification'),
    page: document.getElementById('achievements-page'),
    grid: document.getElementById('achievements-grid'),
    showBtn: document.getElementById('show-achievements-btn')
  }
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
const ACHIEVEMENTS = {
  first_habit: {
    title: "–ü–µ—Ä–≤—ã–π —à–∞–≥!",
    desc: "–°–æ–∑–¥–∞–Ω–∞ –ø–µ—Ä–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞",
    icon: "üöÄ",
    check: (h) => h.length >= 1
  },
  three_days: {
    title: "–ó–∞–¥–µ–ª –Ω–∞ –±—É–¥—É—â–µ–µ",
    desc: "–û—Ç–º–µ—á–∞–ª–∏ –ø—Ä–∏–≤—ã—á–∫—É 3 –¥–Ω—è –ø–æ–¥—Ä—è–¥",
    icon: "üìà",
    check: (h) => h.some(x => x.days.length >= 3)
  },
  week: {
    title: "–ù–µ–¥–µ–ª—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã",
    desc: "7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ —Å –ø—Ä–∏–≤—ã—á–∫–æ–π",
    icon: "üèÜ",
    check: (h) => h.some(x => x.days.length >= 7)
  }
};

// ======================
// –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –î–ê–ù–ù–´–ú–ò
// ======================

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage
function loadData() {
  try {
    const habbitsString = localStorage.getItem(HABBIT_KEY);
    if (habbitsString) {
      habbits = JSON.parse(habbitsString);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö', error);
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ localStorage
function saveData() {
  localStorage.setItem(HABBIT_KEY, JSON.stringify(habbits));
}

// ======================
// –§–£–ù–ö–¶–ò–ò –†–ï–ù–î–ï–†–ò–ù–ì–ê
// ======================

// –†–µ–Ω–¥–µ—Ä –º–µ–Ω—é –ø—Ä–∏–≤—ã—á–µ–∫
function renderMenu(activeHabbit) {
  page.menu.innerHTML = '';

  habbits.forEach((habbit) => {
    const menuItem = document.createElement('div');
    menuItem.className = 'menu-item';

    menuItem.innerHTML = `
      <div class="habbit-container">
        <div class="menu-link ${habbit.id === activeHabbit?.id ? 'menu-link-active' : ''}">
          <svg class="menu-icon">
            <use xlink:href="img/sprite.svg#${habbit.icon}"></use>
          </svg>
          <span class="habbit-name">${habbit.name}</span>
        </div>
        <button class="delete-btn" onclick="deleteHabbit(${habbit.id}, event)">
          –£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É
        </button>
      </div>
    `;

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –ø—Ä–∏–≤—ã—á–∫–µ
    menuItem.querySelector('.menu-link').addEventListener('click', () => {
      render(habbit);
    });

    page.menu.appendChild(menuItem);
  });
}

// –†–µ–Ω–¥–µ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø—Ä–∏–≤—ã—á–∫–∏
function renderHabbitHeader(habbit) {
  // –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  const progresPercent = habbit.days.length <= habbit.target
    ? (habbit.days.length * 100) / habbit.target
    : 100;

  page.habbitHeader.habbitTitle.textContent = habbit.name;
  page.habbitHeader.progresPercent.textContent = `${progresPercent.toFixed()}%`;
  page.habbitHeader.progresBar.style.setProperty('--progress', `${progresPercent}%`);
}

// –†–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫–∞ –¥–Ω–µ–π
function renderHabbitComments(habbit) {
  page.content.habitList.innerHTML = '';

  habbit.days.forEach((day, i) => {
    const elem = document.createElement('li');
    elem.className = 'comment';
    elem.innerHTML = `
      <h3 class="comment-day">–î–µ–Ω—å ${i + 1}</h3>
      <div class="comment-description">
        <span class="comment-text">${day.comment}</span>
        <button class="delete" onclick="deleteDay(${i})">
          <svg class="delete-button-icon">
            <use xlink:href="img/sprite.svg#delete"></use>
          </svg>
        </button>
      </div>
    `;
    page.content.habitList.appendChild(elem);
  });

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–º–µ—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
  page.content.newCommentDay.textContent = `–î–µ–Ω—å ${habbit.days.length + 1}`;
  page.content.form.setAttribute('active-habbit-id', habbit.id);
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
function render(activeHabbit) {
  if (!activeHabbit && habbits.length > 0) {
    activeHabbit = habbits[0];
  }

  if (!activeHabbit) {
    renderGreeting();
    return;
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ URL –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞
  document.location.hash = activeHabbit.id;
  document.title = `dailyDo - ${activeHabbit.name}`;

  renderHabbitContent();
  renderMenu(activeHabbit);
  renderHabbitHeader(activeHabbit);
  renderHabbitComments(activeHabbit);
}

// ======================
// –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô
// ======================

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–Ω—è
function addDays(e) {
  e.preventDefault();
  const form = e.target;
  const comment = form.newDayComment.value.trim();

  if (!comment) return;

  const habbitId = Number(form.getAttribute('active-habbit-id'));
  const habbit = habbits.find(h => h.id === habbitId);

  if (habbit) {
    habbit.days.push({ comment });
    saveData();
    render(habbit);
    checkAchievements();
    form.reset();
  }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –¥–Ω—è
function deleteDay(index) {
  const habbitId = Number(page.content.form.getAttribute('active-habbit-id'));
  const habbit = habbits.find(h => h.id === habbitId);

  if (habbit) {
    habbit.days.splice(index, 1);
    saveData();
    render(habbit);
  }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏
function addHabbit(e) {
  e.preventDefault();
  const form = e.target;
  const formData = new FormData(form);

  const newHabbit = {
    id: habbits.length + 1,
    icon: formData.get('habbit'),
    name: formData.get('habbitName'),
    target: Number(formData.get('habbitGoal')),
    days: []
  };

  habbits.push(newHabbit);
  saveData();
  toglePopup();
  render(newHabbit);
  checkAchievements();
}

// ======================
// –°–ò–°–¢–ï–ú–ê –î–û–°–¢–ò–ñ–ï–ù–ò–ô
// ======================

// –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
function showAchievement(achievement) {
  const { notification } = page.achievements;
  const emoji = notification.querySelector('#achievement-emoji');
  const title = notification.querySelector('#achievement-title');
  const desc = notification.querySelector('#achievement-desc');

  emoji.textContent = achievement.icon;
  title.textContent = achievement.title;
  desc.textContent = achievement.desc;

  notification.classList.add('active');

  setTimeout(() => {
    notification.classList.remove('active');
  }, 4000);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function checkAchievements() {
  const unlocked = JSON.parse(localStorage.getItem(ACHIEVEMENTS_KEY) || '{}');
  let hasNew = false;

  Object.entries(ACHIEVEMENTS).forEach(([key, achievement]) => {
    if (!unlocked[key] && achievement.check(habbits)) {
      unlocked[key] = true;
      showAchievement(achievement);
      hasNew = true;
    }
  });

  if (hasNew) {
    localStorage.setItem(ACHIEVEMENTS_KEY, JSON.stringify(unlocked));
  }
}

// ======================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
// ======================

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
(function init() {
  loadData();

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ hash –≤ URL
  const hashId = Number(document.location.hash.replace('#', ''));
  const initialHabbit = hashId
    ? habbits.find(h => h.id === hashId)
    : habbits[0];

  render(initialHabbit || null);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  if (page.achievements.showBtn) {
    page.achievements.showBtn.addEventListener('click', () => {
      page.achievements.page.style.display = 'block';
    });
  }

  // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  setTimeout(checkAchievements, 1000);
})();